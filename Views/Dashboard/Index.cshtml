@model DashboardViewModel

@{
    ViewData["Title"] = "List";
    int i = 0;
}

<style>
    /* The heart of the matter */

    .horizontal-scrollable > .row {
        overflow-x: auto;
        white-space: nowrap;
    }

        .horizontal-scrollable > .row > .col-xs-4 {
            display: inline-block;
            float: none;
        }
</style>

<div class="text-center">
    <h1 class="display-4 ">@Model.Lists.First().Board.Title  </h1>
</div>

<div class="container-fluid">
    <div class="row my-3 flex-row flex-nowrap overflow-auto">
        @foreach (var list in Model.Lists)
        {
            <div class="col-3 mb-5">
                <h5 class="card-title">@list.Title</h5>
                <ul class="list-group">
                    @if (list.Works != null && list.Works.Count > 0)
                    {
                        @foreach (var work in list.Works.OrderByDescending(x => x.Priority))
                        {

                    <li class="list-group-item">
                        <div class="fs-3">
                            @if (work.Status == 3)
                            {
                                <p class="text-decoration-line-through"> @work.Title.</p>
                            }
                            else
                            {
                                @work.Title
                            }
                        </div>
                        <br />

                        Priority:
                        <span style="" class="col-3">&nbsp;&nbsp;</span>
                        @switch (work.Priority)
                        {
                            case 0:
                                <span style="" class="col-3">Low</span>
                                break;
                            case 1:
                                <span style="" class="col-3">Medium</span>
                                break;
                            case 2:
                                <span style="" class="col-3">High</span>
                                break;
                            case 3:
                                <span style="" class="col-3 text-danger">Urgent!</span>
                                break;

                        }
                        <br />
                        Status:
                        <span style="" class="col-3">&nbsp;&nbsp;</span>
                        @switch (work.Status)
                        {
                            case 0:
                                <span style="" class="col-3">To-Do</span>
                                break;
                            case 1:
                                <span style="" class="col-3">Doing</span>
                                break;
                            case 2:
                                <span style="" class="col-3">Pending</span>
                                break;
                            case 3:
                                <span style="" class="col-3 text-success">Done</span>
                                break;

                        }
                        <br />
                        @if (@work.Deadline != null)
                        {
                            if (@work.Deadline < DateTime.Now && work.Status != 3)
                            {
                                <div class="text-danger">Deadline is over!</div>
                                <div>Deadline:  @work.Deadline</div>
                            }
                            else
                            {
                                <div>Deadline:  @work.Deadline</div>
                            }
                        }
                        @if (@work.WorkMembers.Any())
                        {
                            foreach (var workMember in work.WorkMembers)
                            {
                                if (workMember.MemberId == Model.MemberId)
                                {
                                    <div class="text-right text-info">You are on this work</div>
                                    break;
                                }
                            }
                        }
                        <a asp-route-id="@work.WorkId" asp-action="EditWork" class="btn btn-primary my-1">Edit work</a>
                    </li>
                        }
                    }
                    <li class="list-group-item text-muted">
                        <div id="@("addNewWorkButton" + list.ListId )"> <button class="btn btn-primary" onclick="getElementById('@("addNewWork" + list.ListId )').style.display = 'block'; this.style.display = 'none'">+ Add a new work</button> </div>
                        <div id="@("addNewWork" + list.ListId )" style="display:none;">

                            <form asp-action="AddWork">
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                @Html.Hidden("ListId", @Model.Lists[i++].ListId.ToString())
                                <input type="text" class="form-control" asp-for="Work.Title" placeholder="Enter a work name">
                                <input type="submit" class="btn btn-primary" value="Save new work">
                                <div class="btn btn-danger " value="" onclick="getElementById('@("addNewWorkButton" + list.ListId )').style.display = 'block'; document.getElementById('@("addNewWork" + list.ListId )').style.display = 'none';">Cancel</div>
                            </form>
                        </div>
                    </li>
                </ul>
            </div>
        }
        <div class="col-3 mt-4">
            <ul class="list-group">
                <li class="list-group-item text-muted">
                    <div id="addListButton">
                        <a class="btn btn-primary" asp-action="CreateList" asp-route-id="@Model.Lists.FirstOrDefault().BoardId">Create a List</a>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>




